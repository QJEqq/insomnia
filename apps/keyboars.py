from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.requests import get_branches, get_halls, get_prices_by_hall , get_branch
from database.models import AdminRole

start_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üìç –§–∏–ª–∏–∞–ª—ã", callback_data="branches"),
        InlineKeyboardButton(text="üïí –°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞", callback_data="check_places"),
        
    ],
    [
        InlineKeyboardButton(text="üí∏ –¶–µ–Ω—ã", callback_data="prices"),
        InlineKeyboardButton(text="üñ•Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä—ã", callback_data="pcs"),
    ],
    [
        InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"),
    ]
])

# ---- –ú–µ–Ω—é —Ñ–∏–ª–∏–∞–ª–æ–≤ ----
async def get_branches_keyboard():
    keyboard = InlineKeyboardBuilder()
    branches = await get_branches()
    
    # –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 2 –≤ —Å—Ç—Ä–æ–∫–µ)
    for branch in branches:
        keyboard.add(InlineKeyboardButton(
            text=f"{branch.emoji} {branch.name}",
            callback_data=f"branch:{branch.id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
    keyboard.row(InlineKeyboardButton(
        text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_start"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ (2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–æ–≤)
    return keyboard.adjust(2, 1).as_markup()
    
# ---- –ö–∞—Ä—Ç–æ—á–∫–∞ —Ñ–∏–ª–∏–∞–ª–∞ ----
def get_branch_details_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        
        [
        InlineKeyboardButton(text="‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –ø—Ä–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã", callback_data="check_places"),
        ],
        
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="branches"),
            InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_start"),
        ]
    ])
    
# ---- –†–∞–∑–¥–µ–ª "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" ----
info_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="phone"),
        InlineKeyboardButton(text="üì¢ Telegram", url="https://t.me/insomnia_game_club"),  
    ],
    [
        InlineKeyboardButton(text="üåê –í–ö–æ–Ω—Ç–∞–∫—Ç–µ", url="https://vk.com/insomnia_tyumen"),  
        InlineKeyboardButton(text="‚úâÔ∏è –ü–æ—á—Ç–∞", callback_data="email"),
    ],
    [
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_start"),  
    ]
])


# ---- –ú–µ–Ω—é –¶–µ–Ω—ã ----

async def price_branches_keyboard():
    keyboard = InlineKeyboardBuilder()
    all_branches = await get_branches()
    for branch in all_branches:
        keyboard.add(InlineKeyboardButton(text=f"{branch.emoji} {branch.name}",
                                          callback_data=f'price_branch:{branch.name}:{branch.id}'))
        
    keyboard.add(InlineKeyboardButton(text="üìç –£–∑–Ω–∞—Ç—å –ø—Ä–æ —Ñ–∏–ª–∏–∞–ª—ã", callback_data="branches"),
                 InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_start") 
                 )
    return keyboard.adjust(1).as_markup()
    

    
# --- –®–∞–≥ 2: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–ª–∞ ---
async def hall_types_keyboard(branch_id, branch_name):
    keyboard = InlineKeyboardBuilder()
    all_halls = await get_halls(branch_id)
    for hall in all_halls:
        keyboard.row(InlineKeyboardButton(text = f'{hall.name}',
                                          callback_data=f'price_hall:{branch_name}:{hall.name.lower()}:{hall.id}:{branch_id}' ))
    keyboard.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="prices"),
        InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_start")
    )
    return keyboard.as_markup()

async def tariff_keyboard(hall_id: int, branch_name: str, hall_name: str, branch_id):
    keyboard = InlineKeyboardBuilder()
    
    keyboard.add(
        InlineKeyboardButton(
            text="‚è≥ –ü–æ—á–∞—Å–æ–≤–∞—è", 
            callback_data=f"price_tariff:{branch_name}:{hall_name}:{hall_id}:hourly:{branch_id}"
        ),
        InlineKeyboardButton(
            text="üì¶ –ü–∞–∫–µ—Ç", 
            callback_data=f"price_tariff:{branch_name}:{hall_name}:{hall_id}:package:{branch_id}"
        )
    )
    keyboard.row(
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", 
            callback_data=f"price_branch:{branch_name}:{branch_id}"
        ),
        InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_start")
    )
    return keyboard.as_markup()

async def hourly_time_keyboard(hall_id: int, branch_name: str, hall_name: str, branch_id):
    keyboard = InlineKeyboardBuilder()
    prices = await get_prices_by_hall(hall_id)
    
    hourly_prices = [p for p in prices if p.price_type == "hourly"]
    for price in hourly_prices:
        time_name = "–î–µ–Ω—å (08:00-17:00)" if "day" in price.period else "–ù–æ—á—å (17:00-08:00)"
        keyboard.add(InlineKeyboardButton(
            text=time_name,
            callback_data=f"price_time:{branch_name}:{hall_name}:{hall_id}:hourly:{price.period}"
        ))
    
    keyboard.row(
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", 
            callback_data=f"price_hall:{branch_name}:{hall_name.lower()}:{hall_id}:{branch_id}"
        ),
        InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_start")
    )
    
    return keyboard.adjust(1).as_markup()

async def package_keyboard(hall_id: int, branch_name: str, hall_name: str, branch_id):
    keyboard = InlineKeyboardBuilder()
    prices = await get_prices_by_hall(hall_id)
    
    package_prices = [p for p in prices if p.price_type == "package"]
    for price in package_prices:
        if "_" in price.period:
            pkg, time = price.period.split("_")
            btn_text = f"{pkg} ({'–¥–Ω–µ–≤–Ω—ã–µ' if time == 'day' else '–Ω–æ—á–Ω—ã–µ'})"
        else:
            btn_text = "–ù–æ—á–Ω–æ–π –ø–∞–∫–µ—Ç (22:00-09:00)" if price.period == "night" else price.period
        
        keyboard.add(InlineKeyboardButton(
            text=btn_text,
            callback_data=f"price_package:{branch_name}:{hall_name}:{hall_id}:{price.period}"
        ))
    
    keyboard.row(
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", 
            callback_data=f"price_hall:{branch_name}:{hall_name.lower()}:{hall_id}:{branch_id}"
        ),
        InlineKeyboardButton(
            text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", 
            callback_data="back_to_start"
        )
    )
    return keyboard.adjust(1).as_markup()


async def available_places_keyboard(branch_id: int):
    keyboard = InlineKeyboardBuilder()
    halls = await get_halls(branch_id)
    
    for hall in halls:
        keyboard.add(InlineKeyboardButton(
            text=f"{hall.name}",
            callback_data=f"available_hall:{hall.id}"
        ))
    
    keyboard.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="check_places"),
        InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_start")
    )
    return keyboard.adjust(1).as_markup()

async def back_to_places_keyboard(branch_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"available_branch:{branch_id}"),
            InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_start")
        ]
    ])
    
async def price_branches_keyboard2():
    keyboard = InlineKeyboardBuilder()
    all_branches = await get_branches()
    for branch in all_branches:
        keyboard.add(InlineKeyboardButton(text=f"{branch.emoji} {branch.name}",
                                          callback_data=f'available_branch:{branch.id}'))
        
    keyboard.add(InlineKeyboardButton(text="üìç –£–∑–Ω–∞—Ç—å –ø—Ä–æ —Ñ–∏–ª–∏–∞–ª—ã", callback_data="branches"),
                 InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_start") 
                 )
    return keyboard.adjust(1).as_markup()

# –º–µ–Ω—é –∫–æ–º–ø—å—é—Ç–µ—Ä—ã 

async def pcs_branches_keyboard():
    keyboard = InlineKeyboardBuilder()
    all_branches = await get_branches()
    for branch in all_branches:
        keyboard.add(InlineKeyboardButton(
            text=f"{branch.emoji} {branch.name}",
            callback_data=f"pcs_branch:{branch.id}"
        ))
    keyboard.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
    )
    return keyboard.adjust(1).as_markup()

async def pcs_halls_keyboard(branch_id: int):
    keyboard = InlineKeyboardBuilder()
    all_halls = await get_halls(branch_id)
    for hall in all_halls:
        keyboard.add(InlineKeyboardButton(
            text=f"{hall.name}",
            callback_data=f"pcs_hall:{hall.id}"
        ))
    keyboard.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="pcs"),
        InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_start")
    )
    return keyboard.adjust(1).as_markup()


#admin keyboards


async def admin_main_kb(user_id: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤"""
    from database.requests import check_admin_access  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    
    builder = InlineKeyboardBuilder()
    
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    
    if await check_admin_access(user_id, AdminRole.MANAGER.value):
        builder.button(text="üíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º–∏", callback_data="admin_computers")
    
    if await check_admin_access(user_id, AdminRole.SUPERADMIN.value):
        builder.button(text="üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_manage_admins")
    
    builder.adjust(1)
    return builder.as_markup()

def AdminStartKeyboard(user_id: int):
    builder = InlineKeyboardBuilder()
    
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    builder.button(text="üíª –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º–∏", callback_data="admin_computers")
    builder.button(text="üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_manage_admins")
    
    builder.adjust(1)
    return builder.as_markup()

def admin_management_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin")
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="list_admins")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    builder.adjust(1)
    return builder.as_markup()

async def admin_pcs_branches_keyboard():
    keyboard = InlineKeyboardBuilder()
    all_branches = await get_branches()
    for branch in all_branches:
        keyboard.add(InlineKeyboardButton(
            text=f"{branch.emoji} {branch.name}",
            callback_data=f"admin_pcs_branch:{branch.id}"
        ))
    keyboard.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_admin")
    )
    return keyboard.adjust(1).as_markup()

async def admin_pcs_halls_keyboard(branch_id: int):
    keyboard = InlineKeyboardBuilder()
    all_halls = await get_halls(branch_id)
    for hall in all_halls:
        keyboard.add(InlineKeyboardButton(
            text=f"{hall.name}",
            callback_data=f"admin_pcs_hall:{hall.id}:{branch_id}"
        ))
    keyboard.row(
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_computers"),
        InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_admin")
    )
    return keyboard.adjust(1).as_markup()
async def build_computers_keyboard(branch_id: int, hall_id: int):
    keyboard = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (+1/-1)
    keyboard.row(
        InlineKeyboardButton(
            text="‚ûñ1 (–û—Å–≤–æ–±–æ–¥–∏—Ç—å)",
            callback_data=f"comp_dec:{branch_id}:{hall_id}:1"
        ),
        InlineKeyboardButton(
            text="‚ûï1 (–ó–∞–Ω—è—Ç—å)", 
            callback_data=f"comp_inc:{branch_id}:{hall_id}:1"
        )
    )
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"admin_pcs_branch:{branch_id}"
        ),
        InlineKeyboardButton(
            text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é",
            callback_data="back_admin"
        )
    )
    
    return keyboard.adjust(1).as_markup()


