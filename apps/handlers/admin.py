import asyncio
from datetime import datetime
from aiogram import Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message , CallbackQuery
from database.models import Admin, async_session , AdminRole
from apps.keyboars import (
    AdminStartKeyboard,
    admin_pcs_branches_keyboard,
    admin_pcs_halls_keyboard,
    build_computers_keyboard,
    admin_management_kb,
    roles_kb
)
from database.requests import get_branch, is_admin ,get_computers_all, get_computers_stats, get_hall, set_computers_status , show_admins, get_admin_by_id, delete_admin, update_admin_role, get_user_role
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

class ComputerState(StatesGroup):
    waiting_amount = State()
    
class AdminActions(StatesGroup):
    waiting_admin_id = State()
    waiting_new_role = State()
    waiting_delete_id = State()
    
class AddAdminStates(StatesGroup):
    waiting_tg_id = State()
    waiting_name = State()
    waiting_role = State()  

router = Router()


@router.message(Command('admin'))
async def admin_panel(message : Message):
    await asyncio.sleep(0.2)
    user_id = message.from_user.id
    user_role = await get_user_role(user_id)
    admin_role = await is_admin(user_id)
    if admin_role is not None:
        await message.answer (
            'üìö <b> –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å </b> üìö',
            reply_markup=AdminStartKeyboard(user_role),
            parse_mode="HTML"
        )
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
@router.callback_query(F.data == 'back_admin')
async def main_panel(callback : CallbackQuery):
    user_role = await get_user_role(callback.from_user.id)
    admin_role = await is_admin(callback.from_user.id)
    if admin_role is not None:
        await callback.message.edit_text (
                'üìö <b> –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å </b> üìö',
                reply_markup=AdminStartKeyboard(user_role),
                parse_mode="HTML"
            )
        
@router.callback_query(F.data == "admin_stats")
async def admin_stat(callback : CallbackQuery):
    await asyncio.sleep(0.2)
    admin_role = await is_admin(callback.from_user.id)
    if admin_role is not None:
        stats = await get_computers_all()  
    
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º</b>\n\n"
            f"‚ñ™ –í—Å–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤: <b>{stats['total']}</b>\n"
            f"üü¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö: <b>{stats['free']}</b>\n"
            f"üî¥ –ó–∞–Ω—è—Ç—ã—Ö: <b>{stats['busy']}</b>"
        )

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="back_admin"  
            )
        )

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.edit_text('–û—à–∏–±–∫–∞')

# START - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º–∏

@router.callback_query(F.data == 'admin_computers')
async def admin_branch(callback : CallbackQuery):
    admin_role = await is_admin(callback.from_user.id)
    if admin_role is not None:
        await callback.message.edit_text(
            " –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª ",
            reply_markup=await admin_pcs_branches_keyboard()
        )
    
@router.callback_query(F.data.startswith("admin_pcs_branch:"))
async def show_pcs_halls(callback: CallbackQuery):
    admin_role = await is_admin(callback.from_user.id)
    if admin_role is not None:
        branch_id = int(callback.data.split(":")[1])
        branch = await get_branch(branch_id)
        await callback.message.edit_text(
            f"üè¢ –§–∏–ª–∏–∞–ª: {branch.name}\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª:",
            reply_markup=await admin_pcs_halls_keyboard(branch_id)
        )


@router.callback_query(F.data.startswith('admin_pcs_hall:'))
async def computer_panel(callback : CallbackQuery):
    admin_role = await is_admin(callback.from_user.id)
    if admin_role is not None:
        parts = callback.data.split(':')
        branch_id = int(parts[2])
        hall_id = int(parts[1])
        
        branch = await get_branch(branch_id)
        hall = await get_hall(hall_id)
        await asyncio.sleep(0.2)
        admin_role = await is_admin(callback.from_user.id)
        if admin_role is not None:
            stats = await get_computers_stats(branch_id,hall_id)  
            keyboard = await build_computers_keyboard(branch_id, hall_id)
            
            text = (
                f" <b>üè¢ –§–∏–ª–∏–∞–ª: {branch.name}\n–ó–∞–ª: {hall.name}</b>\n\n"
                f"‚ñ™ –í—Å–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤: <b>{stats['total']}</b>\n"
                f"üü¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö: <b>{stats['free']}</b>\n"
                f"üî¥ –ó–∞–Ω—è—Ç—ã—Ö: <b>{stats['busy']}</b>"
            )
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await callback.answer()



@router.callback_query(F.data.startswith("comp_dec:"))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è -1
async def decrease_computers_handler(callback: CallbackQuery):
    admin_role = await is_admin(callback.from_user.id)
    if admin_role is not None:
        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: "comp_dec:{branch_id}:{hall_id}:1"
            _, branch_id, hall_id, _ = callback.data.split(':')
            branch_id = int(branch_id)
            hall_id = int(hall_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await get_computers_stats(branch_id, hall_id)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –º–µ–Ω—å—à–µ 0)
            new_busy = max(0, stats['busy'] - 1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ –ë–î
            success = await set_computers_status(branch_id, hall_id, new_busy)
            
            if success:
                await callback.answer("‚úÖ –û—Å–≤–æ–±–æ–¥–∏–ª 1 –∫–æ–º–ø—å—é—Ç–µ—Ä")
                await update_computer_panel(callback, branch_id, hall_id)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
                
        except Exception as e:
            await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("comp_inc:"))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è +1
async def increase_computers_handler(callback: CallbackQuery):
    admin_role = await is_admin(callback.from_user.id)
    if admin_role is not None:
        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: "comp_inc:{branch_id}:{hall_id}:1"
            _, branch_id, hall_id, _ = callback.data.split(':')
            branch_id = int(branch_id)
            hall_id = int(hall_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await get_computers_stats(branch_id, hall_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã
            if stats['free'] <= 0:
                await callback.answer("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤", show_alert=True)
                return
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö
            new_busy = stats['busy'] + 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ –ë–î
            success = await set_computers_status(branch_id, hall_id, new_busy)
            
            if success:
                await callback.answer("‚úÖ –ó–∞–Ω—è–ª 1 –∫–æ–º–ø—å—é—Ç–µ—Ä")
                await update_computer_panel(callback, branch_id, hall_id)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
                
        except Exception as e:
            await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def update_computer_panel(callback: CallbackQuery, branch_id: int, hall_id: int):
    admin_role = await is_admin(callback.from_user.id)
    if admin_role is not None:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            branch = await get_branch(branch_id)
            hall = await get_hall(hall_id)
            stats = await get_computers_stats(branch_id, hall_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            text = (
                f"<b>üè¢ –§–∏–ª–∏–∞–ª: {branch.name}\n"
                f"üñ• –ó–∞–ª: {hall.name}</b>\n\n"
                f"‚ñ™ –í—Å–µ–≥–æ: <b>{stats['total']}</b>\n"
                f"üü¢ –°–≤–æ–±–æ–¥–Ω–æ: <b>{stats['free']}</b>\n"
                f"üî¥ –ó–∞–Ω—è—Ç–æ: <b>{stats['busy']}</b>"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = await build_computers_keyboard(branch_id, hall_id)
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
        except Exception as e:
            await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", show_alert=True)
        
# END - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º–∏

# START - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ 

@router.callback_query(F.data == 'admin_manage_admins')
async def superadmin_panel(callback: CallbackQuery):
    await asyncio.sleep(0.2)
    user_id = callback.from_user.id
    admin_role = await is_admin(user_id)
    if admin_role is not None:
        await callback.message.edit_text (
            'üëë <b> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ </b> üëë',
            parse_mode="HTML",
            reply_markup=admin_management_kb()
            
        )
    else:
        await callback.message.edit_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        
async def get_username_by_id(bot: Bot, user_id: int):
    try:
        chat = await bot.get_chat(user_id)
        return chat.username  # –í–µ—Ä–Ω–µ—Ç None, –µ—Å–ª–∏ username –Ω–µ—Ç
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return None
    
@router.callback_query(F.data == 'list_admins')
async def list_admins( callback : CallbackQuery):
    admin_role = await is_admin(callback.from_user.id)
    if admin_role is not None:
        await asyncio.sleep(0.2)
        bot = callback.bot
        admins = await show_admins()
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
            callback_data="admin_manage_admins"
        ))
        text = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n"
        for idx, admin in enumerate(admins, 1):
            username = await get_username_by_id(bot, admin.user_id)
            username_display = f"@{username}" if username else "‚Äî"
            role_name = AdminRole(admin.role).display_name
            text += f"{admin.id} | {admin.full_name} | {username_display} | {role_name} | {admin.created_at}\n"

        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup()
        )
        await callback.answer()
    
@router.callback_query(F.data == "edit_admin")
async def start_edit_admin(callback: CallbackQuery, state: FSMContext):
    admin_role = await is_admin(callback.from_user.id)
    if admin_role is not None:
        await state.set_state(AdminActions.waiting_admin_id)
        keyboard = InlineKeyboardBuilder()
        keyboard.row(  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
            InlineKeyboardButton(
                text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤",
                callback_data="list_admins"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_action"
            )
        )
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Ü–∏—Ñ—Ä–∞):\n\n",
            reply_markup=keyboard.as_markup()
        )
    
@router.message(AdminActions.waiting_admin_id)
async def process_admin_id(message: Message, state: FSMContext):
    try:
        admin_id = int(message.text)
        admin = await get_admin_by_id(admin_id)
        
        if not admin:
            await message.answer("–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        await state.update_data(admin_id=admin_id)
        await state.set_state(AdminActions.waiting_new_role)
        
        await message.answer(
            f"–í—ã–±—Ä–∞–Ω –∞–¥–º–∏–Ω: {admin.full_name}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:",
            reply_markup=await roles_kb()
        )
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (ID –∞–¥–º–∏–Ω–∞):")
        

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
@router.callback_query(AdminActions.waiting_new_role, F.data.startswith("role_"))
async def process_role_selection(callback: CallbackQuery, state: FSMContext):
    admin_role = await is_admin(callback.from_user.id)
    if admin_role is not None:
        role_map = {
            "role_1": 1,
            "role_2": 2,
            "role_3": 3
        }
        
        data = await state.get_data()
        await update_admin_role(data['admin_id'], role_map[callback.data])
        
        await callback.message.edit_text("‚úÖ –†–æ–ª—å –∞–¥–º–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
        await state.clear()
        await superadmin_panel(callback)

# –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data == "delete_admin")
async def start_delete_admin(callback: CallbackQuery, state: FSMContext):
    admin_role = await is_admin(callback.from_user.id)
    if admin_role is not None:
        await state.set_state(AdminActions.waiting_delete_id)
        keyboard = InlineKeyboardBuilder()
        keyboard.row(  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
            InlineKeyboardButton(
                text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤",
                callback_data="list_admins"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_action"
            )
        )
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n",
            reply_markup=keyboard.as_markup()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
@router.message(AdminActions.waiting_delete_id)
async def process_delete_admin(message: Message, state: FSMContext):
    try:
        admin_id = int(message.text)
        success = await delete_admin(admin_id)
        
        if success:
            await message.answer("‚úÖ –ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        else:
            await message.answer("‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (ID –∞–¥–º–∏–Ω–∞):")
        

@router.callback_query(F.data == 'add_admin')
async def start_add_admin(callback : CallbackQuery , state : FSMContext):
    await state.set_state(AddAdminStates.waiting_tg_id)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):",
        reply_markup=InlineKeyboardBuilder()
            .button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")
            .as_markup()
    )
    await callback.answer()

@router.message(AddAdminStates.waiting_tg_id)
async def process_tg_id(message: Message, state: FSMContext):
    try:
        tg_id = int(message.text)
        await state.update_data(tg_id=tg_id)
        await state.set_state(AddAdminStates.waiting_name)
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:",
            reply_markup=InlineKeyboardBuilder()
                .button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_admin")
                .as_markup()
        )
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
@router.message(AddAdminStates.waiting_name)
async def process_name(message: Message, state: FSMContext):
    if len(message.text) < 2:
        await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
        
    await state.update_data(full_name=message.text)
    await state.set_state(AddAdminStates.waiting_role)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∞:",
        reply_markup=await roles_kb()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
@router.callback_query(AddAdminStates.waiting_role, F.data.startswith("role_"))
async def process_role(callback: CallbackQuery, state: FSMContext):
    admin_role = await is_admin(callback.from_user.id)
    if admin_role is not None:
        role_mapping = {
            "role_1": 1,
            "role_2": 2,
            "role_3": 3
        }
        
        data = await state.get_data()
        role_value = role_mapping[callback.data]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ –ë–î
        async with async_session() as session:
            try:
                session.add(Admin(
                    user_id=data['tg_id'],
                    full_name=data['full_name'],
                    role=role_value,
                    is_active=True,
                    created_at=datetime.now()
                ))
                await session.commit()
                
                role_name = AdminRole(role_value).display_name
                await callback.message.edit_text(
                    f"‚úÖ –ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    f"ID: {data['tg_id']}\n"
                    f"–ò–º—è: {data['full_name']}\n"
                    f"–†–æ–ª—å: {role_name}",
                    reply_markup=InlineKeyboardBuilder()
                        .button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_admins")
                        .as_markup()
                )
            except Exception as e:
                await callback.message.answer(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {str(e)}",
                    reply_markup=InlineKeyboardBuilder()
                        .button(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="add_admin")
                        .as_markup()
                )
            finally:
                await state.clear()
        


@router.callback_query(F.data == "cancel_action")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await superadmin_panel(callback)