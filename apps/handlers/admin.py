import asyncio
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message , CallbackQuery
from database.models import async_session
from apps.keyboars import (
    AdminStartKeyboard,
    admin_pcs_branches_keyboard,
    admin_pcs_halls_keyboard,
    build_computers_keyboard
)
from database.requests import get_branch, is_admin ,get_computers_all, get_computers_stats, get_hall, set_computers_status
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

class ComputerState(StatesGroup):
    waiting_amount = State()
router = Router()


@router.message(Command('admin'))
async def admin_panel(message : Message):
    await asyncio.sleep(0.2)
    user_id = message.from_user.id
    admin_role = await is_admin(user_id)
    if admin_role is not None:
        await message.answer (
            'üìö <b> –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å </b> üìö',
            reply_markup=AdminStartKeyboard(user_id),
            parse_mode="HTML"
        )
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
@router.callback_query(F.data == 'back_admin')
async def main_panel(callback : CallbackQuery):
    user_id = callback.from_user.id
    await callback.message.edit_text (
            'üìö <b> –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å </b> üìö',
            reply_markup=AdminStartKeyboard(user_id),
            parse_mode="HTML"
        )
        
@router.callback_query(F.data == "admin_stats")
async def admin_stat(callback : CallbackQuery):
    await asyncio.sleep(0.2)
    admin_role = await is_admin(callback.from_user.id)
    if admin_role is not None:
        stats = await get_computers_all()  
    
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º</b>\n\n"
            f"‚ñ™ –í—Å–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤: <b>{stats['total']}</b>\n"
            f"üü¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö: <b>{stats['free']}</b>\n"
            f"üî¥ –ó–∞–Ω—è—Ç—ã—Ö: <b>{stats['busy']}</b>"
        )

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="back_admin"  
            )
        )

        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.edit_text('–û—à–∏–±–∫–∞')

@router.callback_query(F.data == 'admin_computers')
async def admin_branch(callback : CallbackQuery):
    await callback.message.edit_text(
        " –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª ",
        reply_markup=await admin_pcs_branches_keyboard()
    )
    
@router.callback_query(F.data.startswith("admin_pcs_branch:"))
async def show_pcs_halls(callback: CallbackQuery):
    branch_id = int(callback.data.split(":")[1])
    branch = await get_branch(branch_id)
    await callback.message.edit_text(
        f"üè¢ –§–∏–ª–∏–∞–ª: {branch.name}\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª:",
        reply_markup=await admin_pcs_halls_keyboard(branch_id)
    )

        
@router.callback_query(F.data.startswith('admin_pcs_hall:'))
async def computer_panel(callback : CallbackQuery):
    fall = None
    parts = callback.data.split(':')
    branch_id = int(parts[2])
    hall_id = int(parts[1])
    
    branch = await get_branch(branch_id)
    hall = await get_hall(hall_id)
    await asyncio.sleep(0.2)
    admin_role = await is_admin(callback.from_user.id)
    if admin_role is not None:
        stats = await get_computers_stats(branch_id,hall_id)  
        keyboard = await build_computers_keyboard(branch_id, hall_id)
        
        text = (
            f" <b>üè¢ –§–∏–ª–∏–∞–ª: {branch.name}\n–ó–∞–ª: {hall.name}</b>\n\n"
            f"‚ñ™ –í—Å–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤: <b>{stats['total']}</b>\n"
            f"üü¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö: <b>{stats['free']}</b>\n"
            f"üî¥ –ó–∞–Ω—è—Ç—ã—Ö: <b>{stats['busy']}</b>"
        )
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer()



@router.callback_query(F.data.startswith("comp_dec:"))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è -1
async def decrease_computers_handler(callback: CallbackQuery):
    """–£–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –Ω–∞ 1"""
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: "comp_dec:{branch_id}:{hall_id}:1"
        _, branch_id, hall_id, _ = callback.data.split(':')
        branch_id = int(branch_id)
        hall_id = int(hall_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await get_computers_stats(branch_id, hall_id)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –º–µ–Ω—å—à–µ 0)
        new_busy = max(0, stats['busy'] - 1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ –ë–î
        success = await set_computers_status(branch_id, hall_id, new_busy)
        
        if success:
            await callback.answer("‚úÖ –û—Å–≤–æ–±–æ–¥–∏–ª 1 –∫–æ–º–ø—å—é—Ç–µ—Ä")
            await update_computer_panel(callback, branch_id, hall_id)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
            
    except Exception as e:
        await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("comp_inc:"))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è +1
async def increase_computers_handler(callback: CallbackQuery):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –Ω–∞ 1"""
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: "comp_inc:{branch_id}:{hall_id}:1"
        _, branch_id, hall_id, _ = callback.data.split(':')
        branch_id = int(branch_id)
        hall_id = int(hall_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await get_computers_stats(branch_id, hall_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã
        if stats['free'] <= 0:
            await callback.answer("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤", show_alert=True)
            return
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö
        new_busy = stats['busy'] + 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ –ë–î
        success = await set_computers_status(branch_id, hall_id, new_busy)
        
        if success:
            await callback.answer("‚úÖ –ó–∞–Ω—è–ª 1 –∫–æ–º–ø—å—é—Ç–µ—Ä")
            await update_computer_panel(callback, branch_id, hall_id)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
            
    except Exception as e:
        await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def update_computer_panel(callback: CallbackQuery, branch_id: int, hall_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        branch = await get_branch(branch_id)
        hall = await get_hall(hall_id)
        stats = await get_computers_stats(branch_id, hall_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = (
            f"<b>üè¢ –§–∏–ª–∏–∞–ª: {branch.name}\n"
            f"üñ• –ó–∞–ª: {hall.name}</b>\n\n"
            f"‚ñ™ –í—Å–µ–≥–æ: <b>{stats['total']}</b>\n"
            f"üü¢ –°–≤–æ–±–æ–¥–Ω–æ: <b>{stats['free']}</b>\n"
            f"üî¥ –ó–∞–Ω—è—Ç–æ: <b>{stats['busy']}</b>"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = await build_computers_keyboard(branch_id, hall_id)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text=text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        await callback.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", show_alert=True)
