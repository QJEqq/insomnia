from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart
import asyncio
from apps.keyboars import info_keyboard, start_keyboard,  get_branch_details_keyboard , \
                                get_branches_keyboard, price_branches_keyboard, hall_types_keyboard , tariff_keyboard, \
                                hourly_time_keyboard, package_keyboard, available_places_keyboard, back_to_places_keyboard,\
                                price_branches_keyboard2, pcs_branches_keyboard , pcs_halls_keyboard
from database.requests import get_price, get_hall, get_branch, get_available_computers, get_available_computers_count, get_branches
from datetime import datetime

router = Router()



@router.message(CommandStart())
async def cmd_start(message: Message):
    await asyncio.sleep(0.3)
    await message.answer(
    "‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Insomnia</b> ‚ú®\n\n"
    "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
    "‚Ä¢ –£–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤ üè¢\n"
    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ üïí\n"
    "‚Ä¢ –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã üí∏\n"
    "‚Ä¢ –£–∑–Ω–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ üíª",
    reply_markup=start_keyboard,
    parse_mode="HTML"
)
    


@router.callback_query(F.data == "branches")
async def show_branches(callback: CallbackQuery):
    await asyncio.sleep(0.1)
    await callback.message.edit_text(
        "üìç –í—ã–±–µ—Ä–∏ —Ä–∞–π–æ–Ω:",
        reply_markup=await get_branches_keyboard(),
        parse_mode="Markdown"
    )
    


@router.callback_query(F.data.startswith("branch:"))
async def show_branch_details(callback: CallbackQuery):
    
    await asyncio.sleep(0.1)
    
    branch = callback.data.split(":")[1]
    
    if branch == "1":
        text = (
            "üó∫ [–ö–∞—Ä—Ç–∞ 2–ì–ò–°](https://2gis.ru/tyumen/firm/70000001083620594/65.662717%2C57.159974?m=65.66474%2C57.160166%2F17.37)\n\n"
            "üå≥ –§–∏–ª–∏–∞–ª –õ–µ—Å–æ–±–∞–∑–∞\n"
            "‚Ä¢ –ê–¥—Ä–µ—Å: –£–ª–∏—Ü–∞ –°—É–¥–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π, 40/2\n"
            "‚Ä¢ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ\n"
            "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (982) 971‚Äí72‚Äí28\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ª—ã: Standart, Vip, Bootcamp"
        )
    elif branch == "2":
        text = (
            "üó∫ [–ö–∞—Ä—Ç–∞ 2–ì–ò–°](https://2gis.ru/tyumen/branches/70000001083620593/firm/70000001098698503?m=65.500298%2C57.130425%2F16.69)\n\n"
            "üèôÔ∏è –§–∏–ª–∏–∞–ª –ú–æ—Å–∫–æ–≤—Å–∫–∏–π\n"
            "‚Ä¢ –ê–¥—Ä–µ—Å: –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —Ç—Ä–∞–∫—Ç, 87 –∫1 —ç—Ç–∞–∂\n"
            "‚Ä¢ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ\n"
            "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (982) 961‚Äí40‚Äí04\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ª—ã: Standart, Vip, Tv"
        )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_branch_details_keyboard(),
        parse_mode="Markdown",
        disable_web_page_preview=False
    )

# ---- –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----
@router.callback_query(F.data == "back_to_start")
async def back_to_start(callback: CallbackQuery):
    await asyncio.sleep(0.1)
    await callback.message.edit_text(
        "‚ú® <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> ‚ú®",
        reply_markup=start_keyboard,
        parse_mode="HTML"
    )
    


@router.callback_query(F.data == "info")
async def show_info(callback: CallbackQuery):
    await asyncio.sleep(0.1)
    await callback.message.edit_text(
        "üìå <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (982) 961‚Äí40‚Äí04\n"
        "‚Ä¢ Telegram: @insomnia_game_club\n"
        "‚Ä¢ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: https://vk.com/insomnia_tyumen\n"
        "‚Ä¢ –ü–æ—á—Ç–∞: insomnia.gameclub72@gmail.com",
        reply_markup=info_keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "phone")
async def send_phone(callback: CallbackQuery):
    await callback.answer("‚òéÔ∏è –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º: +7 (982) 961‚Äí40‚Äí04", show_alert=True)

@router.callback_query(F.data == "email")
async def send_email(callback: CallbackQuery):
    await callback.answer("üì© –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: insomnia.gameclub72@gmail.com", show_alert=True)
    
# --- –î–∞–Ω–Ω—ã–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞ ---



@router.callback_query(F.data == "prices")
async def show_price_branches(callback: CallbackQuery):
    await callback.message.edit_text(
        "üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:",
        reply_markup=await price_branches_keyboard()
    )



@router.callback_query(F.data.startswith("price_branch:"))
async def show_hall_types(callback: CallbackQuery):
    branch_name = callback.data.split(":")[1]
    branch_id = callback.data.split(":")[2]
    await callback.message.edit_text(
        f"üè¢ –§–∏–ª–∏–∞–ª: {branch_name.capitalize()}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ª–∞:",
        reply_markup=await hall_types_keyboard(branch_id, branch_name)
    )



@router.callback_query(F.data.startswith("price_hall:"))
async def show_tariffs(callback: CallbackQuery):
    _, branch_name, hall_name, hall_id, branch_id = callback.data.split(":")
    await callback.message.edit_text(
        f"üè¢ {branch_name.capitalize()} | üö™ {hall_name.capitalize()}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
        reply_markup=await tariff_keyboard(hall_id,branch_name, hall_name,branch_id)
    )



@router.callback_query(F.data.startswith("price_hall:"))
async def show_tariffs(callback: CallbackQuery):
    _, branch_name, hall_name, hall_id = callback.data.split(":")
    await callback.message.edit_text(
        f"üè¢ {branch_name.capitalize()} | üö™ {hall_name.capitalize()}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:",
        reply_markup=await tariff_keyboard(int(hall_id), branch_name, hall_name)
    )

@router.callback_query(F.data.startswith("price_tariff:"))
async def show_time_options(callback: CallbackQuery):
    _, branch_name, hall_name, hall_id, tariff, branch_id = callback.data.split(":")
    if tariff == "hourly":
        await callback.message.edit_text(
            "‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
            reply_markup=await hourly_time_keyboard(int(hall_id), branch_name, hall_name, branch_id)
        )
    else:
        await callback.message.edit_text(
            "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:",
            reply_markup=await package_keyboard(int(hall_id), branch_name, hall_name, branch_id)
        )

@router.callback_query(F.data.startswith("price_time:"))
async def show_hourly_price(callback: CallbackQuery):
    _, branch_name, hall_name, hall_id, _, period = callback.data.split(":")
    price = await get_price(int(hall_id), "hourly", period)
    
    time_range = "08:00-17:00" if period == "day" else "17:00-08:00"
    await callback.message.edit_text(
        f"üè¢ –§–∏–ª–∏–∞–ª: {branch_name.capitalize()}\n"
        f"üö™ –ó–∞–ª: {hall_name.capitalize()}\n"
        f"‚è≥ –í—Ä–µ–º—è: {time_range}\n"
        f"üí∏ –¶–µ–Ω–∞: {price.amount} —Ä—É–±/—á–∞—Å\n\n"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_start")
        ]])
    )

@router.callback_query(F.data.startswith("price_package:"))
async def show_package_price(callback: CallbackQuery):
    _, branch_name, hall_name, hall_id, period = callback.data.split(":")
    price = await get_price(int(hall_id), "package", period)
    
    if "_" in period:
        pkg, time = period.split("_")
        text = f"üì¶ –ü–∞–∫–µ—Ç {pkg}\n‚è± –í—Ä–µ–º—è: {'08:00-17:00' if time == 'day' else '17:00-08:00'}"
    else:
        text = "üåô –ù–æ—á–Ω–æ–π –ø–∞–∫–µ—Ç (22:00-09:00)"
    
    await callback.message.edit_text(
        f"üè¢ –§–∏–ª–∏–∞–ª: {branch_name.capitalize()}\n"
        f"üö™ –ó–∞–ª: {hall_name.capitalize()}\n"
        f"{text}\nüí∏ –¶–µ–Ω–∞: {price.amount} —Ä—É–±",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_start")
        ]])
    )

# –°–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞

@router.callback_query(F.data == "check_places")
async def check_places(callback: CallbackQuery):
    await callback.message.edit_text(
        "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:",
        reply_markup=await price_branches_keyboard2()  
    )

@router.callback_query(F.data.startswith("available_branch:"))
async def show_available_halls(callback: CallbackQuery):
    branch_id = int(callback.data.split(":")[1])
    branch = await get_branch(branch_id)
    
    await callback.message.edit_text(
        f"üè¢ –§–∏–ª–∏–∞–ª: {branch.name}\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª:",
        reply_markup=await available_places_keyboard(branch_id)
    )

@router.callback_query(F.data.startswith("available_hall:"))
async def show_available_computers(callback: CallbackQuery):
    hall_id = int(callback.data.split(":")[1])
    hall = await get_hall(hall_id)
    branch = await get_branch(hall.branch_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã
    available = await get_available_computers(hall.branch_id, hall.id)
    current_time = datetime.now().strftime("%H:%M")
    
    await callback.message.edit_text(
        f"üè¢ –§–∏–ª–∏–∞–ª: {branch.name}\n"
        f"üö™ –ó–∞–ª: {hall.name}\n"
        f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}\n"
        f"üÜì –°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤: {len(available)}",
        reply_markup=await back_to_places_keyboard(hall.branch_id)
    )

#–º–µ–Ω—é –∫–æ–º–ø—å—é—Ç–µ—Ä—ã
    
@router.callback_query(F.data == "pcs")
async def show_pcs_branches(callback: CallbackQuery):
    await callback.message.edit_text(
        "üñ•Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:",
        reply_markup=await pcs_branches_keyboard()
    )

@router.callback_query(F.data.startswith("pcs_branch:"))
async def show_pcs_halls(callback: CallbackQuery):
    branch_id = int(callback.data.split(":")[1])
    branch = await get_branch(branch_id)
    await callback.message.edit_text(
        f"üè¢ –§–∏–ª–∏–∞–ª: {branch.name}\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª:",
        reply_markup=await pcs_halls_keyboard(branch_id)
    )

@router.callback_query(F.data.startswith("pcs_hall:"))
async def show_hall_specs(callback: CallbackQuery):
    hall_id = int(callback.data.split(":")[1])
    hall = await get_hall(hall_id)
    branch = await get_branch(hall.branch_id)
    
    await callback.message.edit_text(
        f"*üè¢ –§–∏–ª–∏–∞–ª:* {branch.name}\n"
        f"*üö™ –ó–∞–ª:* {hall.name}\n\n"
        f"*üíª –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:*\n"
        f"`{hall.specs.replace('\\n', '\n')}`",
        parse_mode="MarkdownV2",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_to_start")]
        ])
    )
